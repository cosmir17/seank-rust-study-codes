I have the following Rust code : """ let mut numbers = vec![1, 2, 3, 4, 5]; for num in &numbers { if num % 2 == 0 { numbers.retain(|&x| x != num); } } println!("{:?}", numbers); """ Why do I get the following error message? : """ error[E0502]: cannot borrow numbers as mutable because it is also borrowed as immutable   --> src\main.rs:171:14    | 169 |    for num in &numbers {    |               --------    |               |    |               immutable borrow occurs here    |               immutable borrow later used here 170 |        if num % 2 == 0 { 171 |            &numbers.retain(|&x| x != num);    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here """
The error occurs because you are trying to mutate the numbers vector while also borrowing it immutably in the for loop. In Rust, you cannot have a mutable and immutable reference to the same data at the same time, as that would violate one of Rust's main principles of preventing data races.

Here's what's happening:

for num in &numbers creates an immutable reference &numbers that is used to iterate over the vector. This immutable reference is valid for the duration of the loop.
Inside the loop, when you call numbers.retain(|&x| x != num), you are trying to mutate the numbers vector by removing elements that don't match the condition x != num.
However, because numbers is already borrowed as immutable by the for loop, you cannot create a mutable reference to it within the loop body. This is what the error message is telling you: you cannot borrow numbers as mutable because it is already borrowed as immutable.

To fix this, you can either:

Use a different approach that doesn't require mutating the vector while iterating over it, such as creating a new vector with the desired elements.
Use the iter_mut method instead of iter to create a mutable iterator over the vector's elements.
Here's an example using iter_mut:

rust


Copy code
let mut numbers = vec![1, 2, 3, 4, 5];
numbers.retain(|x| x % 2 != 0);
println!("{:?}", numbers);
This will remove all even numbers from the numbers vector and print the remaining odd numbers.

Alternatively, you can create a new vector with the desired elements:

rust


Copy code
let numbers = vec![1, 2, 3, 4, 5];
let odd_numbers: Vec<_> = numbers.iter().filter(|&x| x % 2 != 0).cloned().collect();
println!("{:?}", odd_numbers);
This creates a new odd_numbers vector containing only the odd numbers from the original numbers vector.