S
is .enumerate() method like Scala's zipWithIndex method?

A
Yes, Rust's `enumerate()` method is similar to Scala's `zipWithIndex` method. Both methods are used to associate each element of a collection with its index.

In Rust, `enumerate()` is an iterator adapter that takes an iterator and returns a new iterator that yields pairs of the form `(index, element)`, where `index` is the current position and `element` is the corresponding element from the original iterator.

Here's an example in Rust:

```rust
let numbers = vec![10, 20, 30, 40, 50];

for (index, num) in numbers.iter().enumerate() {
    println!("Index: {}, Number: {}", index, num);
}
```

Output:
```
Index: 0, Number: 10
Index: 1, Number: 20
Index: 2, Number: 30
Index: 3, Number: 40
Index: 4, Number: 50
```

Similarly, in Scala, `zipWithIndex` is a method available on collections that returns a new collection of pairs, where each pair consists of an element from the original collection and its corresponding index.

Here's an example in Scala:

```scala
val numbers = List(10, 20, 30, 40, 50)

for ((num, index) <- numbers.zipWithIndex) {
  println(s"Index: $index, Number: $num")
}
```

Output:
```
Index: 0, Number: 10
Index: 1, Number: 20
Index: 2, Number: 30
Index: 3, Number: 40
Index: 4, Number: 50
```

As you can see, both `enumerate()` in Rust and `zipWithIndex` in Scala serve the same purpose of associating elements with their indices in a collection, making it convenient to work with both the elements and their positions simultaneously.



